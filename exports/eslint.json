{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended-type-checked",
    "plugin:deprecation/recommended",
    "plugin:sonarjs/recommended-legacy",
    "prettier",
    "plugin:xss/recommended"
  ],
  "ignorePatterns": ["setupTests.ts", ".ci/**", ".vscode/**", ".git/**", "dist/**", "node_modules"],
  "overrides": [
    {
      "files": ["playground/**/*.ts", "playground/**/*.tsx"],
      "rules": {
        "import/no-extraneous-dependencies": "off",
        "formatjs/no-literal-string-in-jsx": "off",
        "no-console": "off"
      }
    },
    {
      "files": [
        "**/a11y/**/*ts",
        "**/e2e/**/*ts",
        "**/*.test.ts",
        "**/*.test.tsx",
        "__setup__/**/*.ts",
        "**/testing/**/*.ts",
        "**/testing/**/*.tsx"
      ],
      "rules": {
        "@typescript-eslint/await-thenable": "warn",
        "@typescript-eslint/no-unsafe-argument": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/no-unsafe-call": "off",
        "@typescript-eslint/no-unsafe-member-access": "off",
        "@typescript-eslint/no-unsafe-return": "off",
        "@typescript-eslint/restrict-template-expressions": "off",
        "formatjs/no-literal-string-in-jsx": "off"
      }
    }
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "project": "./tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "prettier",
    "testing-library",
    "import",
    "unused-imports",
    "sonarjs",
    "no-unsanitized",
    "xss",
    "formatjs",
    "deprecation"
  ],
  "root": true,
  "rules": {
    "@typescript-eslint/no-inferrable-types": "error",
    "@typescript-eslint/no-misused-promises": [
      "error",
      {
        "checksVoidReturn": {
          "attributes": false
        }
      }
    ],
    "@typescript-eslint/no-redeclare": [
      "error",
      {
        "builtinGlobals": false
      }
    ],
    "@typescript-eslint/no-unnecessary-condition": "warn",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "argsIgnorePattern": "^_",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/switch-exhaustiveness-check": "error",
    "camelcase": [
      2,
      {
        "properties": "never"
      }
    ],
    "formatjs/enforce-default-message": ["error", "literal"],
    "formatjs/enforce-id": [
      "error",
      {
        "idInterpolationPattern": "[sha512:contenthash:base64:6]"
      }
    ],
    "formatjs/enforce-placeholders": "error",
    "formatjs/no-literal-string-in-jsx": "error",
    "formatjs/no-useless-message": "error",
    "unused-imports/no-unused-imports": "error",
    "import/no-default-export": "error",
    "import/no-duplicates": ["error"],
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "**/*.test.tsx",
          "**/*.test.ts",
          "**/testing/**/*.ts",
          "**/testing/**/*.tsx",
          "**/setupJest.ts",
          "**/setupJest.js",
          "**/*.stories.tsx",
          "/playground/**",
          "e2e/**",
          "a11y/**",
          "tooling/**"
        ]
      }
    ],
    "import/order": [
      "error",
      {
        "alphabetize": {
          "order": "asc"
        },
        "groups": ["builtin", "external", "internal", "index", "parent", "sibling", "object", "type"],
        "newlines-between": "always",
        "distinctGroup": true,
        "pathGroupsExcludedImportTypes": ["builtin"]
      }
    ],
    "no-alert": "error",
    "no-console": "error",
    "no-eq-null": "error",
    "no-eval": "error",
    "no-param-reassign": "error",
    "no-restricted-imports": [
      "error",
      {
        "patterns": [
          {
            "group": ["lib/*"],
            "message": "Please use your library as a consumer would using the full package name"
          }
        ]
      }
    ],
    "no-restricted-syntax": [
      "warn",
      {
        "message": "Do not import internal methods or types. They can break or disappear without warning when bumping dependencies.",
        "selector": "ImportSpecifier[imported.name=/^_/]"
      }
    ],
    "no-unsanitized/method": "error",
    "no-unsanitized/property": "error",
    "prettier/prettier": "error",
    "sonarjs/no-duplicate-string": "off"
  }
}
